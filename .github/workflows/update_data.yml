name: Update Congress Data

on:
  schedule:
    # Runs at 3 AM UTC every day (10 PM EST/7 PM PST)
    - cron: '0 3 * * *'
  # Allows manual trigger
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # Fetch all history for all branches and tags
        fetch-depth: 0
        # Use the PAT for authentication
        token: ${{ secrets.PAT }}
        # Always get the latest version
        ref: main
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run data fetcher
      env:
        CONGRESS_GOV_API_KEY: ${{ secrets.CONGRESS_GOV_API_KEY }}
      run: python fetch_members.py
    
    - name: Commit and push changes
      env:
        # Use the same PAT for pushing
        PAT: ${{ secrets.PAT }}
      run: |
        # Configure Git
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Add all changes
        git add data/
        
        # Check if there are changes to commit
        if ! git diff --cached --quiet; then
          # Store the data files temporarily
          echo "Backing up newly fetched data files..."
          cp -r data/ /tmp/new_data/
          
          # Reset to latest remote state to avoid conflicts
          git reset --hard
          git fetch origin main
          git reset --hard origin/main
          
          # Restore the newly fetched data
          echo "Restoring newly fetched data..."
          cp -r /tmp/new_data/* data/
          
          # Set up remote with PAT
          git remote set-url origin https://${{ github.actor }}:$PAT@github.com/${{ github.repository }}.git
          
          # Add and commit the updated data
          git add data/
          
          # Only commit if there are actually changes
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update Congress member data [skip ci]"
            
            # Push changes with retry logic
            echo "Pushing changes..."
            for i in {1..3}; do
              if git push origin HEAD:main; then
                echo "Successfully pushed changes"
                break
              else
                echo "Push attempt $i failed, retrying..."
                git fetch origin main
                git reset --hard origin/main
                cp -r /tmp/new_data/* data/
                git add data/
                if ! git diff --cached --quiet; then
                  git commit -m "Auto-update Congress member data [skip ci]"
                fi
                sleep 2
              fi
            done
          else
            echo "No changes detected after reset, skipping push"
          fi
        else
          echo "No changes to commit"
        fi
